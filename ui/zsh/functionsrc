#--------------- FUNCTIONS --------------------
function ununzip() {
    # Undo Unzip
    unzip -t $1 | awk '{print $2}' | tail -n +2 | xargs rm -fr
}

function cat() {
    # Cat the file if the line length is lower than screen size, else 'less'
    if [ -f $1 ]; then
        terminal_height=$(tput lines)
        file_lines=$(wc -l < $1 | awk '{print $1}')

        if (( $file_lines > $terminal_height )); then
            less $1
        else
            /bin/cat $1
        fi
    else
        echo "File: '$1' not found"
    fi
}

function bkp() {
    # backup file
    if [ -z "$1" ]; then
        echo "Usage: bkp filename to backup"
        return
    fi
    cp -r "$1" "$1.bkp"
    echo "Successfully backed up to $1.bkp"
}

function rst() {
    # restore backup file
    if [ -z "$1" ]; then
        echo "Usage: rst filename (without .bkp) to restore"
        return
    fi
    cp -r "$1.bkp" "$1"
    rm "$1.bkp"
    echo "Successfully restored to $1"
}

## Encryption & Decryption

function encrypt() {
    # encrypts the given file with password prompt
    # parameters $1: input file, $2: output file
    usage="Usage: encrypt infile outfile"
    if [ -z "$1" ] && [ -z "$2" ]; then
        echo "$usage"
        return
    fi

    echo -n "Enter encryption password: "
    read -s password
    openssl enc -aes-256-cbc -a -salt -in $1 -out $2 -k $password
}

function decrypt() {
    # decrypts the given file with password prompt
    # parameters $1: input file, $2: output file
    usage="Usage: decrypt infile outfile"
    if [ -z "$1" ] && [ -z "$2" ]; then
        echo "$usage"
        return
    fi

    echo -n "Enter decryption password: "
    read -s password
    openssl enc -aes-256-cbc -a -d -salt -in $1 -out $2 -k $password
}

# fbr - checkout git branch
fbr() {
  local branches branch
  branches=$(git branch) &&
  branch=$(echo "$branches" | fzf-tmux -d 15 +m) &&
  git checkout $(echo "$branch" | sed "s/.* //")
}
