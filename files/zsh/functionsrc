#--------------- FUNCTIONS --------------------
function ununzip() {
    # Undo Unzip
    unzip -t $1 | awk '{print $2}' | tail -n +2 | xargs rm -fr
}

function tile() {
    brew services start yabai
    brew services start skhd
}

function untile() {
    brew services stop yabai
    brew services stop skhd
}

function file_source() {
    # check file exists and source
    # parameter 1: the file name
    [ -f $1 ] && source $1
}

function bkp() {
    # backup file
    # parameter 1: the filename
    if [ -z "$1" ]; then
        echo "Usage: bkp filename to backup"
        return
    fi
    cp -r "$1" "$1.bkp"
    echo "Successfully backed up to $1.bkp"
}

function rst() {
    # restore backup file
    # parameter 1: the filename without .bkp
    if [ -z "$1" ]; then
        echo "Usage: rst filename (without .bkp) to restore"
        return
    fi
    cp -r "$1.bkp" "$1"
    rm "$1.bkp"
    echo "Successfully restored to $1"
}

## Encryption & Decryption

function encrypt() {
    # encrypts the given file with password prompt
    # parameters $1: input file, $2: output file
    usage="Usage: encrypt infile outfile"
    if [ -z "$1" ] && [ -z "$2" ]; then
        echo "$usage"
        return
    fi

    echo -n "Enter encryption password: "
    read -s password
    openssl enc -aes-256-cbc -a -salt -in $1 -out $2 -k $password
}

function decrypt() {
    # decrypts the given file with password prompt
    # parameters $1: input file, $2: output file
    usage="Usage: decrypt infile outfile"
    if [ -z "$1" ] && [ -z "$2" ]; then
        echo "$usage"
        return
    fi

    echo -n "Enter decryption password: "
    read -s password
    openssl enc -aes-256-cbc -a -d -salt -in $1 -out $2 -k $password
}

fbr() {
    # checkout git branch
    local branches branch
    branches=$(git branch) &&
    branch=$(echo "$branches" | fzf-tmux -d 15 +m) &&
    git checkout $(echo "$branch" | sed "s/.* //")
}

function s() {
    # shortname for "ssh", defaults username to root
    # parameters $1: host number, $2: (optional) username, default root

    usage="Usage: s host_number username (optional, default root)"

    USERNAMES=( contextus vanguard )

    if [ -z "$1" ] && [ -z "$2" ]; then
        echo "$usage"
        return
    fi

    HOST=$1
    SSH_USER=$2

    if [ -z "$SSH_USER" ]; then
        SSH_USER="root"
        echo "[?] Trying username: $SSH_USER\n"
    fi

    ssh "192.168.1.$HOST" -l "$SSH_USER"

    if [ $? -ne "0" ]; then
        for UNAME in "${USERNAMES[@]}"
        do 
            echo "[?] Trying username: $UNAME\n"
            ssh "192.168.1.$HOST" -l "$UNAME"

            if [ $? -eq "0" ]; then
                return
            fi
        done
    fi
}

function x() {
    # xxh: https://github.com/xxh/xxh
    # shortname for "xxh", defaults username to root
    # parameters $1: host number, $2: (optional) username, default root

    usage="Usage: s host_number username (optional, default root)"
    USERNAMES=( contextus vanguard )

    if [ -z "$1" ] && [ -z "$2" ]; then
        echo "$usage"
        return
    fi

    HOST=$1
    SSH_USER=$2

    if [ -z "$SSH_USER" ]; then
        SSH_USER="root"
        echo "[?] Trying username: $SSH_USER\n"
    fi

    xxh "192.168.1.$HOST" -l "$SSH_USER"

    if [ $? -ne "0" ]; then
        for UNAME in "${USERNAMES[@]}"
        do 
            echo "[?] Trying username: $UNAME\n"
            xxh "192.168.1.$HOST" -l "$UNAME"

            if [ $? -eq "0" ]; then
                return
            fi
        done
    fi
}

